openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22055
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateRange
          description: Filter books by release date range
          required: false
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        200:
          $ref: '#/components/schemas/SuccessfulResponse'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateBooks"
      responses: 
        200:
          $ref: '#/components/schemas/SuccessfulResponse'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/{bookId}:
    delete:
      tags:
        - "Books"
      summary: Remove books
      operationId: deleteBooks
      parameters:
        - in: query
          name: Remove books
          description: Delete book by id
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/SuccessfulResponse'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /authors:
    get:
      tags:
        - "Authors"
      summary: Get all authors
      description: Retrieve a list of authors, filterable by name
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/pathPageSize'
        - $ref: '#/components/parameters/pathPage'
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SuccessfulResponse"
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    put:
      tags:
        - "Authors"
      summary: Create or update authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          $ref: '#/components/schemas/SuccessfulResponse'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/{authorId}:
    delete:
      tags:
        - "Authors"
      summary: Delete authors
      operationId: deleteAuthors
      parameters:
        - in: path
          name: id
          description: Remove author by given id
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/SuccessfulResponse'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/authors:
    put:
      tags:
        - Books
      summary: Modify authors for a books by Id
      operationId: updateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  bookId:
                    type: string
                  authorId:
                    type: string
                required:
                  - "bookId"
                  - "authorId"
      responses:
        200:
          $ref: '#/components/schemas/SuccessfulResponse'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /books/topics:
    put:
      tags:
        - Books
      summary: Modify topics for books by Id
      operationId: updateBooksWithTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookTopic"
      responses:
        200:
          $ref: '#/components/schemas/SuccessfulResponse'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /import/book:
    post:
      summary: Import book from JSON/excel file
      consumes:
        - application/json
        - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportDataBook"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /import/author:
    post:
      summary: Import author from Excel or JSON file
      consumes:
        - application/json
        - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      parameters:
        - name: file
          in: formData
          required: true
          type: file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportDataAuthor"
      responses:
        '200':
          description: Succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /topics:
    get:
      tags:
        - "Topics"
      summary: Get all topics
      description: The returned topics are ordered by name.
      operationId: getTopics
      parameters:
        - in: query
          name: name
          description: Filter return topic by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Topic"
    put:
      tags:
        - "Topics"
      summary: Create or update a list of topic
      operationId: crupdateTopic
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateTopic"
      responses:
        200:
          description: The list of created or updated topic
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Topic"

  /topics/{topicId}:
    delete:
      tags:
        - "Topics"
      summary: Remove a topic by id
      operationId: deleteTopic
      parameters:
        - in: path
          name: id
          description: Remove topic by given id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Topic deleted successfully

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: object
            message:
              type: string
        body:
          type: object
    SuccessfulResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
    badRequest:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
    forbiddenOperation:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
    InternalServerError:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
    CrupdateTopic:
      type: object
      properties:
        topicName:
          type: string
    Topic:
      type: object
      allOf:
        - properties:
            id:
              type: string
        - $ref: "#/components/schemas/CrupdateTopic"

    CrupdateBooks:
      type: object
      properties:
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date

    CrupdateAuthors:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"

    Sex:
      type: string
      enum:
        - M
        - F
    Author:
      type: object
      allOf:
        - properties:
            id:
              type: string
        - allOf:
            - $ref: "#/components/schemas/CrupdateAuthors"

    Book:
      type: object
      allOf:
        - properties:
            id:
              type: string
            author:
              allOf:
                - $ref: "#/components/schemas/Author"
            Topic:
              allOf:
                - $ref: "#/components/schemas/Topic"
        - $ref: "#/components/schemas/CrupdateBooks"

    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
      required:
        - "bookId"
        - "authorId"

    UpdateBookTopic:
      type: object
      properties:
        bookId:
          type: string
        topicId:
          type: string
      required:
        - "bookId"
        - "authorId"

    AuthorTopics:
      type: object
      allOf:
        - allOf:
            - $ref: "#/components/schemas/CrupdateAuthors"
      properties:
        topic:
          type: array
          items:
            $ref: "#/components/schemas/Topic"
    ImportDataBook:
      type: object
      oneOf:
        - $ref: "#/components/schemas/ImportBookJSON"
        - $ref: "#/components/schemas/ImportBookExcel"
    ImportBookJSON:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: "#/components/schemas/Book"
    ImportBookExcel:
      type: object
      properties:
        excelFile:
          type: string
    ImportDataAuthor:
      type: object
      oneOf:
        - $ref: "#/components/schemas/ImportAuthorJSON"
        - $ref: "#/components/schemas/ImportAuthorExcel"
    ImportAuthorJSON:
      type: object
      properties:
        authors:
          type: array
          items:
            $ref: "#/components/schemas/Author"
    ImportAuthorExcel:
      type: object
      properties:
        excelFile:
          type: string
          format: binary

  parameters:
    queryPage:
      in: query
      name: QueryPage
      schema:
        type: integer
        default: 1
    queryPageSize:
      in: query
      name: QueryPageSize
      schema:
        type: integer
        default: 50
    pathPage:
      in: path
      name: PathPage
      schema:
        type: integer
        default: 1
    pathPageSize:
      in: path
      name: PathPageSize
      schema:
        type: integer
        default: 50
  responses:
    '200':
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessfulResponse"
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/badRequest"
    '403':
      description: Forbidden operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/forbiddenOperation"
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerError"

