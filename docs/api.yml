openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22055
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateStart
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      summary: Get all authors or filter by name
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The author has been created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - in: query
          name: authorId
          description: The ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: Author successfully deleted
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Update the author of a book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          description: The ID of the book to update
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: The ID of the new author for the book
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author of the book updated successfully
  /books/{bookID}/topic:
    put:
      summary: Link a  topic to a book
      operationId: TopicToBook
      parameters:
        - in: path
          name: bookId
          description: The ID of the book to link 
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: Topic assigned to the book successfully
  /books/authors:
    put:
      summary: Update book-author relationships
      operationId: updateBookAuthorRelationships
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Book-author relationships updated successfully
    /authors/{page}/{pageSize}:
      get:
        summary: Get paginated list of authors
        operationId: getAuthors
        parameters:
          - in: path
            name: page
            description: Page number for pagination
            required: false
            schema:
              type: integer
              default: 1
          - in: path
            name: pageSize
            description: Number of authors per page
            required: false
            schema:
              type: integer
              default: 50
        responses:
          200:
            description: List of authors with pagination
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Author'
      /topics:
        get:
          summary: Get paginated list of topics
          operationId: getTopics
          parameters:
            - in: query
              name: page
              description: Page number for pagination
              required: false
              schema:
                type: integer
                default: 1
            - in: query
              name: pageSize
              description: Number of topics per page
              required: false
              schema:
                type: integer
                default: 50
          responses:
            200:
              description: List of topics with pagination
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'
   put:
      tags:
        - "Topics"
      summary: Create or update a list of topic
      operationId: crupdateTopic
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateTopic"
      responses:
        200:
          description: The list of created or updated topic
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Topic"
  /topics/{topicId}:
      delete:
          tags:
            - "Topics"
          summary: Remove a topic by id
          operationId: deleteTopic
          parameters:
            - in: path
              name: id
              description: Remove topic by given id
              required: true
              schema:
                type: string
          responses:
            200:
              description: Topic deleted successfully

    /authorTopics:
      get:
        tags:
          - "Author"
        summary: Get all authorTopics
        description: The returned authors and list topics.
        operationId: getAuthorTopics
        responses:
          200:
            description: The list of authors with list topic
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/AuthorTopics'
  
components:
  schemas:
    Book:
      type: object
      allOf:
        - properties:
            id:
              type: string
            author:
              allOf:
                - $ref: "#/components/schemas/Author"
            Topic:
              allOf:
                - $ref: "#/components/schemas/Topic"
        - $ref: "#/components/schemas/CrupdateBooks"
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId: 
          type: string
      required:
        - "bookId"
        - "authorId"
    CrupdateTopic:
      type: object
      properties:
        topicName:
          type: string
    Topic:
      type: object
      allOf:
        - properties:
            id:
              type: string
        - $ref: "#/components/schemas/CrupdateTopic"
     AuthorTopics:
      type: object
      allOf:
        - allOf:
            - $ref: "#/components/schemas/CrupdateAuthors"
      properties:
        topic:
          type: array
          items:
            $ref: "#/components/schemas/Topic"
   
