openapi: 3.0.3
info:
  title: Library API
  version: 1.1.1
  description: STD22055
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      tags:
        - Books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in : query
          name: startDate
          description: StartDate of release
          required: false
          schema:
            type: string
            format: date
        - in : query
          name: endDate of release
          description:  EndDate of release
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 50

      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

    put:
      summary: Create or update a list of books
      tags:
        - Books
      operationId: updateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
        get:
          tags:
            - Author
          summary: Get all authors
          operationId: getAuthors
          parameters:
            - in: query
              name: authorName
              description: Filter authors by name
              required: false
              schema:
                type: string
            - in: path
              name: page
              required: false
              schema:
                type: integer
                default: 1
            - in: path
              name: page
              required: false
              schema:
                type: integer
                default: 50

          responses:
            200:
              description: List of authors
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
        put:
          summary: Create or update a list of authors
          tags:
            - Author
          operationId: UpdateAuthors
          requestBody:
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Author'
          responses:
            200:
              description:  list of created or updated authors
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'

        delete:
          summary: Delete author by ID
          tags:
            - Author
          operationId: deleteAuthor
          parameters:
            - in: path
              name: authorId
              description: ID of the author to delete
              required: true
              schema:
                type: string
          responses:
            202:
              description: Author deleted successfully
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Update the book by  ID
      operationId: EditBook
      parameters:
        - in: path
          name: bookId
          description: ID of the book
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: ID of the author
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation  Book updated!
  /books/authors:
    put:
      tags:
        - Books
      summary: Update the author of the book
      operationId: UpdateAuthors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        '200':
          description: Successfully operation
components:
  schemas:
    Book:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            author:
              $ref: '#/components/schemas/Author'
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    #----------------------------------------------------------------------------------------------------------------------------------
#Pourquoi UpdateBookAuthor possède uniquement l’identifiant de CrupdateBook et l’identifiant de Author, mais sans les autres propriétés telles que bookName et authorName comme dans leur composant respectif ?
#Cela  permettra de update plus facilement le livre et l’auteur sans toucher aux autres propriétés

#Dans quel cas, UpdateBookAuthor devrait avoir les propriétés de CrupdateBook et de Author ?
# Pour pouvoir faire une modification des propriétés de Author ainsi que de Book en une seule fois , il sera plus facile d’avoir UpdateBookAuthor pour accéder à ces valeurs pour plus d’efficience

#Les paginations sont nécessaires pour être plus efficient dans la gestions des grandes quantités
#de données en la rendant plus rapide et efficace
#---------------------------------------------------------------------------------------------------------------------------------


