openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22055
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateRange
          description: Filter books by release date range
          required: false
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      security:
        - oauth2: [ 'write' ]
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateBooks"
      responses:
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/{bookId}:
    delete:
      tags:
        - "Books"
      summary: Remove books
      operationId: deleteBooks
      security:
        - oauth2: [ 'write' ]
      parameters:
        - in: query
          name: Remove books
          description: Delete book by id
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/BookListBody'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /authors:
    get:
      tags:
        - "Authors"
      summary: Get all authors
      description: Retrieve a list of authors, filterable by name
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/pathPageSize'
        - $ref: '#/components/parameters/pathPage'
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookListBody"
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    put:
      tags:
        - "Authors"
      summary: Create or update authors
      operationId: crupdateAuthors
      security:
        - oauth2: [ 'write' ]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:

        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/{authorId}:
    delete:
      tags:
        - "Authors"
      summary: Delete authors
      operationId: deleteAuthors
      security:
        - oauth2: [ 'write' ]
      parameters:
        - in: path
          name: id
          description: Remove author by given id
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/AuthorList_200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/authors:
    put:
      tags:
        - Books
      summary: Modify authors for a books by Id
      security:
        - oauth2: [ 'write' ]
      operationId: updateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  bookId:
                    type: string
                  authorId:
                    type: string
                required:
                  - "bookId"
                  - "authorId"
      responses:
        200:
          $ref: '#/components/responses/AuthorList_200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /import/book:
    post:
      summary: Import book from JSON/excel file
      security:
        - oauth2: [ 'write' ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportDataBook"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /import/author:
    post:
      summary: Import author from Excel or JSON file
      security:
        - oauth2: [ 'write' ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportDataAuthor"
      responses:
        '200':
          $ref: "#/components/responses/AuthorList_200"
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /visitors:
    get:
      tags:
        - Visitors
      summary: Get all visitors
      description: Retrieve all registered visitors
      operationId: getVisitors
      responses:
        200:
          description: A list of all registered visitors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visitors'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /visitors/{visitorId}/borrow/{bookId}:
    post:
      tags:
        - Visitors
      summary: Borrow a book
      description: Allows a visitor to borrow a book from the library.
      operationId: borrowBook
      security:
        - admin_key: [ ]
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
            description: Visitor's identifier
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            description: Book's identifier to borrow
      responses:
        200:
          description: Book borrowed successfully
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /visitors/{visitorId}/return/{bookId}:
    post:
      tags:
        - Visitors
      summary: Return a book
      security:
        - oauth2: [ 'write' ]
      description: Allows a visitor to return a book to the library.
      operationId: returnBook
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
            description: Visitor's identifier
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            description: Book's identifier to return
      responses:
        200:
          description: Book returned successfully
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /visitors/{visitorId}/activities:
    get:
      tags:
        - Visitors
      summary: Visitor Activities
      security:
        - oauth2: [ 'write' ]
      description: Get borrow and return activities of the specified visitor.
      operationId: getVisitorActivities
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
            description: Identifier of the visitor
        - in: query
          name: start
          description: Start date to filter activities (format YYYY-MM-DDTHH:MM:SS)
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: end
          description: End date to filter activities (format YYYY-MM-DDTHH:MM:SS)
          required: false
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: List of visitor activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VisitorActivities'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

components:
  schemas:
    Visitors:
      type: object
      properties:
        visitorId:
          type: integer
        visitorName:
          type: string
        reference:
          type: string
        role :
          type: string
    Activity:
      type: object
      properties:
        loanId:
          type: string
          description: The ID of the loan made
        bookId:
          type: string
          description: The ID of the borrowed or returned book
        action:
          type: string
          enum:
            - borrow
            - return
          description: The action performed borrowing or returning
        date:
          type: string
          format: date-time
          description: Date and time of the action
    VisitorActivities:
      type: object
      properties:
        visitorId:
          type: string
          description: ID of the visitor
        activities:
          type: array
          items:
            $ref: '#/components/schemas/Activity'


    CrupdateTopic:
      type: object
      properties:
        topicName:
          type: string
    Topic:
      type: object
      allOf:
        - properties:
            id:
              type: string
        - $ref: "#/components/schemas/CrupdateTopic"

    CrupdateBooks:
      type: object
      properties:
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date

    CrupdateAuthors:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"

    Sex:
      type: string
      enum:
        - M
        - F
    Author:
      type: object
      allOf:
        - properties:
            id:
              type: string
        - allOf:
            - $ref: "#/components/schemas/CrupdateAuthors"

    Book:
      type: object
      allOf:
        - properties:
            id:
              type: string
            author:
              allOf:
                - $ref: "#/components/schemas/Author"
            Topic:
              allOf:
                - $ref: "#/components/schemas/Topic"
        - $ref: "#/components/schemas/CrupdateBooks"

    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
      required:
        - "bookId"
        - "authorId"
    AuthorListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Author'

    ImportDataBook:
      type: object
      oneOf:
        - $ref: "#/components/schemas/ImportBookJSON"
        - $ref: "#/components/schemas/ImportBookExcel"
    ImportBookJSON:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: "#/components/schemas/Book"
    ImportBookExcel:
      type: object
      properties:
        excelFile:
          type: string
          example: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    ImportDataAuthor:
      type: object
      oneOf:
        - $ref: "#/components/schemas/ImportAuthorJSON"
        - $ref: "#/components/schemas/ImportAuthorExcel"
    ImportAuthorJSON:
      type: object
      properties:
        authors:
          type: array
          items:
            $ref: "#/components/schemas/Author"
    ImportAuthorExcel:
      type: object
      properties:
        excelFile:
          type: string
          format: binary
          example: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    ResponseBodyTemplate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponsesStatus'
        body:
          type: object
    ResponsesStatus:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
    BadRequest:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 400
          message: BAD REQUEST
        body: {}

    ForbiddenOperation:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 403
          message: FORBIDDEN
        body: {}

    InternalServerError:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 500
          message: Internal Server Error
        body: {}
    BookListBody:
      description:  List of books
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.com/oauth/authorize
          scopes:
            read: Read access
            write: Write access

  parameters:
    queryPage:
      in: query
      name: QueryPage
      schema:
        type: integer
        default: 1
    queryPageSize:
      in: query
      name: QueryPageSize
      schema:
        type: integer
        default: 50
    pathPage:
      in: path
      name: PathPage
      schema:
        type: integer
        default: 1
    pathPageSize:
      in: path
      name: PathPageSize
      schema:
        type: integer
        default: 50
  responses:
    BookList_200:
      description: List of the books
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BookListBody"
    AuthorList_200:
      description: List of books
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuthorListBody'
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequest"
    403:
      description: Forbidden operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ForbiddenOperation"

    500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerError"









